/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practica2_ordenamiento;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author ruben
 */
public class Inicio extends javax.swing.JFrame {

    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
        buttonGroup1.add(ascend);
        buttonGroup1.add(descend);
        buttonGroup2.add(insertion);
        buttonGroup2.add(merge);
        ascend.setSelected(true);
        insertion.setSelected(true);
        cat = new DefaultCategoryDataset();
    }
    private int pasos;
    private static int[] valoresy;
    private static String[] valoresx;
    DefaultCategoryDataset cat;
    private static int[] ordenadoy;
    private static String[] ordenadox;
    private String algoritmo;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        txtruta = new javax.swing.JTextField();
        txtnombre = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        ascend = new javax.swing.JRadioButton();
        descend = new javax.swing.JRadioButton();
        insertion = new javax.swing.JRadioButton();
        merge = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labelpasos = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Generar gr√°fica");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ascend.setText("Ascendente");

        descend.setText("Descendente");

        insertion.setText("Insertion sort");

        merge.setText("buble sort");

        jButton2.setText("Ordenar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Examinar...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 337, Short.MAX_VALUE)
        );

        jLabel1.setText("00:00");

        labelpasos.setText("00");

        jLabel2.setText("Cronometro");

        jLabel4.setText("Pasos");

        jButton4.setText("Generar reporte");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jButton2)
                                    .addGap(8, 8, 8))
                                .addComponent(insertion, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(descend)
                                .addComponent(ascend, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(merge)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtruta, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(31, 31, 31))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(labelpasos))
                                    .addGap(28, 28, 28))))
                        .addGap(43, 43, 43)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(64, 64, 64)
                        .addComponent(ascend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(descend)
                        .addGap(29, 29, 29)
                        .addComponent(insertion)
                        .addGap(8, 8, 8)
                        .addComponent(merge)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jButton4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelpasos)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel4)
                        .addGap(11, 11, 11)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JFileChooser archivo = new JFileChooser();
        int valor = archivo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            txtruta.setText(archivo.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String titulo = null;
        if (!txtruta.getText().equalsIgnoreCase("")) {
            if (txtnombre.getText().equalsIgnoreCase("")) {
                titulo = "Grafica de ordenamiento";
                txtnombre.setText(titulo);
            } else {
                titulo = txtnombre.getText();
            }
            File datos = new File(txtruta.getText());
            BufferedReader br = null;
            try {
                //tama√±o del vector
                Integer tamano = 0;
                Scanner entrada = new Scanner(datos);
                while (entrada.hasNext()) {
                    entrada.nextLine();
                    tamano++;
                }
                //llenar los datos en vectores separados
                br = new BufferedReader(new FileReader(datos));
                String[][] temporal = new String[tamano][2];
                valoresy = new int[tamano - 1];
                valoresx = new String[tamano - 1];
                String line = br.readLine();
                int i = 0;
                String[] encabezado1 = line.split(",");
                line = br.readLine();
                while (null != line) {
                    temporal[i] = line.split(",");
                    line = br.readLine();
                    valoresy[i] = Integer.parseInt(temporal[i][1]);
                    valoresx[i] = temporal[i][0];
                    i++;
                }
                //graficar
                JFreeChart chart = mostrar(cat, titulo, encabezado1[0], encabezado1[1]);
                ChartPanel panel = new ChartPanel(chart);
                panel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
                panel.setPreferredSize(new Dimension(400, 400));
                panel.setBackground(Color.white);
                jPanel1.removeAll();
                jPanel1.setLayout(new BorderLayout());
                jPanel1.add(panel, BorderLayout.NORTH);
                pack();
                repaint();
                //a√±adir los valores a la grafica
                borrar();
                for (int j = 0; j < tamano - 1; j++) {
                    cat.setValue(valoresy[j], "", valoresx[j]);
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                if (null != br) {
                    try {
                        br.close();
                    } catch (IOException ex) {
                        Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay un archivo cargado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        if (valoresy != null) {
            pasos = 0;
            int[] temporaly = new int[valoresx.length];
            String[] temporalx = new String[valoresx.length];
            for (int i = 0; i < valoresx.length; i++) {
                temporaly[i] = valoresy[i];
                temporalx[i] = valoresx[i];
            }
            if (insertion.isSelected()) {
                if (ascend.isSelected() == true) {
                    metodoinsercion(temporaly, temporalx, 0);

                } else if (descend.isSelected() == true) {
                    metodoinsercion(temporaly, temporalx, 1);
                }
                jButton4.setEnabled(true);
                algoritmo = "Ordenamiento por inserci√≥n";
            } else if (merge.isSelected() == true) {
                if (ascend.isSelected()) {
                    metodoburbuja(temporaly, temporalx, 0);
                } else if (descend.isSelected() == true) {
                    metodoburbuja(temporaly, temporalx, 1);
                }
                jButton4.setEnabled(true);
                algoritmo = "Ordenamiento por burbuja";
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se generado una grafica");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String cwd = System.getProperty("user.dir");
        File dir = new File(cwd + "\\Reportes");
        FileWriter escribir;
        PrintWriter nuevaLinea;
        if (!dir.exists() && !dir.isDirectory()) {
            try {
                dir.mkdir();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            }
        }
        File archivo = new File(cwd + "\\Reportes\\" + txtnombre.getText() + ".html");
        archivo.delete();
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            escribir = new FileWriter(archivo, true);
            nuevaLinea = new PrintWriter(escribir);
            nuevaLinea.println("<!DOCTYPE html>\n"
                    + "<html lang=\"en\">\n"
                    + "<head>\n"
                    + "    <meta charset=\"UTF-8\">\n"
                    + "    <title>Reporte</title>\n"
                    + "</head>\n"
                    + "<body>");

            nuevaLinea.println("<h1>Reporte </h1>");
            //muestro el libro
            nuevaLinea.println("<p><b>Nombre: </b>Rub√©n Ralda</p>");
            nuevaLinea.println("<p><b>Carn√©: </b>202111835</p>");
            nuevaLinea.println("<p><b>Algoritmo: </b>" + algoritmo + "</p>");
            nuevaLinea.println("<p><b>Tiempo: </b>" + pasos + "</p>");
            nuevaLinea.println("<p><b>Cantidad de pasos: </b>" + pasos + "</p>");
            nuevaLinea.println("<table border=\"1\">");
            for (int i = 0; i < ordenadox.length; i++) {
                if (ordenadox[i] != null) {
                    nuevaLinea.println("<tr>");
                    nuevaLinea.print("<td>");
                    nuevaLinea.print("<b>" + ordenadox[i] + "</b>");
                    nuevaLinea.print("</td>");
                    nuevaLinea.print("<td>");
                    nuevaLinea.print(ordenadoy[i]);
                    nuevaLinea.print("</td>");
                    nuevaLinea.println("</tr>");
                }
            }
            nuevaLinea.println("</table>");
            nuevaLinea.println(" ");
            nuevaLinea.println("<p>----------------------------------------------------------------------------------------------</p>");
            nuevaLinea.println("<p><b>Datos no ordenados</b></p>");
            nuevaLinea.println("<table border=\"1\">");
            for (int i = 0; i < valoresx.length; i++) {
                if (valoresx[i] != null) {
                    nuevaLinea.println("<tr>");
                    nuevaLinea.print("<td>");
                    nuevaLinea.print("<b>" + valoresx[i] + "</b>");
                    nuevaLinea.print("</td>");
                    nuevaLinea.print("<td>");
                    nuevaLinea.print(valoresy[i]);
                    nuevaLinea.print("</td>");
                    nuevaLinea.println("</tr>");
                }
            }
            nuevaLinea.println("</table>");
            nuevaLinea.println(" ");
            nuevaLinea.println("</body>\n"
                    + "</html>");
            // me cierra mi archivo
            escribir.close();
            JOptionPane.showMessageDialog(this, "El reporte se ha creado con exito");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void metodoinsercion(int[] ordenary, String[] ordenarx, int tipo) {
        int insercion;
        String insercionx;
        for (int siguiente = 1; siguiente < ordenary.length; siguiente++) {
            insercion = ordenary[siguiente];
            insercionx = ordenarx[siguiente];
            int moverElemento = siguiente;
            switch (tipo) {
                case 0: //ascendente
                    while (moverElemento > 0 && ordenary[moverElemento - 1] > insercion) {
                        ordenary[moverElemento] = ordenary[moverElemento - 1];
                        ordenarx[moverElemento] = ordenarx[moverElemento - 1];
                        moverElemento--;
                        pasos++;
                        labelpasos.setText(String.valueOf(pasos));
                        borrar();
                        for (int j = 0; j < ordenary.length; j++) {
                            cat.setValue(ordenary[j], "", ordenarx[j]);
                        }
                    }
                    ordenary[moverElemento] = insercion;
                    ordenarx[moverElemento] = insercionx;
                    borrar();
                    for (int j = 0; j < ordenary.length; j++) {
                        cat.setValue(ordenary[j], "", ordenarx[j]);
                    }
                    break;
                case 1: //descendente
                    while (moverElemento > 0 && ordenary[moverElemento - 1] < insercion) {
                        ordenary[moverElemento] = ordenary[moverElemento - 1];
                        ordenarx[moverElemento] = ordenarx[moverElemento - 1];
                        moverElemento--;
                        pasos++;
                        labelpasos.setText(String.valueOf(pasos));
                        borrar();
                        for (int j = 0; j < ordenary.length; j++) {
                            cat.setValue(ordenary[j], "", ordenarx[j]);
                        }
                    }
                    ordenary[moverElemento] = insercion;
                    ordenarx[moverElemento] = insercionx;
                    borrar();
                    for (int j = 0; j < ordenary.length; j++) {
                        cat.setValue(ordenary[j], "", ordenarx[j]);
                    }
                    break;
                default:
                    throw new AssertionError();
            }
        }
        this.ordenadox = ordenarx;
        this.ordenadoy = ordenary;
    }

    private void metodoburbuja(int[] ordenary, String[] ordenarx, int tipo) {
        int n, i, l = ordenary.length, temp;
        String temp2;
        switch (tipo) {
            case 0://ascendente
                do {
                    n = 0;
                    for (i = 1; i < l; i++) {
                        if (ordenary[i - 1] > ordenary[i]) {
                            temp = ordenary[i - 1];
                            ordenary[i - 1] = ordenary[i];
                            ordenary[i] = temp;
                            temp2 = ordenarx[i - 1];
                            ordenarx[i - 1] = ordenarx[i];
                            ordenarx[i] = temp2;
                            pasos++;
                            n = i;
                            borrar();
                            for (int j = 0; j < valoresy.length; j++) {
                                cat.setValue(ordenary[j], "", ordenarx[j]);
                            }
                        }
                    }
                    l = n;
                    labelpasos.setText(String.valueOf(pasos));
                    borrar();
                    for (int j = 0; j < valoresy.length; j++) {
                        cat.setValue(ordenary[j], "", ordenarx[j]);
                    }
                } while (n != 0);
                break;
            case 1://descendente
                do {
                    n = 0;
                    for (i = 1; i < l; i++) {
                        if (ordenary[i - 1] < ordenary[i]) {
                            temp = ordenary[i - 1];
                            ordenary[i - 1] = ordenary[i];
                            ordenary[i] = temp;
                            temp2 = ordenarx[i - 1];
                            ordenarx[i - 1] = ordenarx[i];
                            ordenarx[i] = temp2;
                            n = i;
                            pasos++;
                            borrar();
                            for (int j = 0; j < valoresy.length; j++) {
                                cat.setValue(ordenary[j], "", ordenarx[j]);
                            }
                        }
                    }
                    l = n;
                    labelpasos.setText(String.valueOf(pasos));
                    borrar();
                    for (int j = 0; j < valoresy.length; j++) {
                        cat.setValue(ordenary[j], "", ordenarx[j]);
                    }
                } while (n != 0);
                break;
            default:
                throw new AssertionError();
        }
        this.ordenadox = ordenarx;
        this.ordenadoy = ordenary;
    }

    private void borrar() {
        int k = cat.getColumnCount();
        for (int i = 0; i < k; i++) {
            cat.removeColumn(0);
        }
    }

    private JFreeChart mostrar(DefaultCategoryDataset dataset, String nombre, String enca1, String enca2) {
        JFreeChart barChart = ChartFactory.createBarChart(
                nombre,
                enca1,
                enca2,
                dataset,
                PlotOrientation.VERTICAL,
                false, true, false);
        return barChart;
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ascend;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JRadioButton descend;
    private javax.swing.JRadioButton insertion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelpasos;
    private javax.swing.JRadioButton merge;
    private javax.swing.JTextField txtnombre;
    private javax.swing.JTextField txtruta;
    // End of variables declaration//GEN-END:variables
}
